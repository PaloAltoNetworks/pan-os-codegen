package {{packageName .GoSdkPath}}
{{- if .Entry}}
    {{- if $.Imports}}
        {{- if $.Spec.Params.uuid}}
            {{renderImports "service" "filtering" "sync" "audit" "rule" "version" "movement"}}
        {{- else}}
            {{renderImports "service" "filtering" "sync"}}
        {{- end}}
    {{- else}}
        {{- if $.Spec.Params.uuid}}
            {{renderImports "service" "filtering" "audit" "movement"}}
        {{- else}}
            {{renderImports "service" "filtering"}}
        {{- end}}
    {{- end}}
{{- else}}
    {{- $numberOfVersions := len .SupportedVersions }}
    {{- if gt $numberOfVersions 1}}
        {{renderImports "service" "version"}}
    {{- else}}
        {{renderImports "service"}}
    {{- end}}
{{- end}}

{{- if and $.Imports .Entry }}
var (
	importsMutexMap     = make(map[string]*sync.Mutex)
	importsMutexMapLock = sync.Mutex{}
)

func (s *Service) getImportMutex(xpath string) *sync.Mutex {
	importsMutexMapLock.Lock()
	defer importsMutexMapLock.Unlock()

	var importMutex *sync.Mutex
	var ok bool
	importMutex, ok = importsMutexMap[xpath]
	if !ok {
		importMutex = &sync.Mutex{}
		importsMutexMap[xpath] = importMutex
	}

	return importMutex
}
{{- end }}

type Service struct {
client util.PangoClient
}

func NewService(client util.PangoClient) *Service {
return &Service{
client: client,
}
}

// Create adds new item, then returns the result.
{{- if and (.Entry) (.Imports)}}
    func (s *Service) Create(ctx context.Context, loc Location, importLocations []ImportLocation, entry *Entry) (*Entry, error) {
{{- else if (.Entry) }}
    func (s *Service) Create(ctx context.Context, loc Location, entry *Entry) (*Entry, error) {
{{- else }}
    func (s *Service) Create(ctx context.Context, loc Location, config *Config) (*Config, error) {
{{- end}}

{{- if .Entry}}
    if entry.Name == "" {
    return nil, errors.NameNotSpecifiedError
    }
{{- end}}

vn := s.client.Versioning()

specifier, _, err := Versioning(vn)
if err != nil {
return nil, err
}

{{- if .Entry}}
    path, err := loc.XpathWithEntryName(vn, entry.Name)
{{- else}}
    path, err := loc.Xpath(vn)
{{- end}}
if err != nil {
return nil, err
}

{{- if .Entry}}
    createSpec, err := specifier(entry)
{{- else}}
    createSpec, err := specifier(config)
{{- end}}
if err != nil {
return nil, err
}

cmd := &xmlapi.Config{
Action:  "set",
Xpath:   util.AsXpath(path[:len(path)-1]),
Element: createSpec,
Target:  s.client.GetTarget(),
}

if _, _, err = s.client.Communicate(ctx, cmd, false, nil); err != nil {
return nil, err
}

{{- if .Imports }}
err = s.importToLocations(ctx, loc, importLocations, entry.Name)
if err != nil {
	return nil, err
}
{{- end }}

{{- if .Entry}}
    return s.Read(ctx, loc, entry.Name, "get")
{{- else}}
    return s.Read(ctx, loc, "get")
{{- end}}
}

{{- if .Imports }}

func (s *Service) importToLocations(ctx context.Context, loc Location, importLocations []ImportLocation, entryName string) error {
	vn := s.client.Versioning()

	importToLocation := func(il ImportLocation) error {
		xpath, err := il.XpathForLocation(vn, loc)
                if err != nil {
			return err
		}

		mutex := s.getImportMutex(util.AsXpath(xpath))
                mutex.Lock()
                defer mutex.Unlock()

                cmd := &xmlapi.Config{
	                Action:  "get",
	                Xpath:   util.AsXpath(xpath),
		}

                bytes, _, err := s.client.Communicate(ctx, cmd, false, nil)
		if err != nil && !errors.IsObjectNotFound(err) {
			return err
		}

		existing, err := il.UnmarshalPangoXML(bytes)
                if err != nil {
                	return err
		}

		for _, elt := range existing {
                	if elt == entryName {
                        	return nil
			}
		}

		existing = append(existing, entryName)

		element, err := il.MarshalPangoXML(existing)
                if err != nil {
                	return err
		}

		cmd = &xmlapi.Config{
                	Action: "set",
                        Xpath: util.AsXpath(xpath[:len(xpath)-1]),
                        Element: element,
		}

                _, _, err = s.client.Communicate(ctx, cmd, false, nil)
		if err != nil {
			return err
		}

		return err
	}

        for _, elt := range importLocations {
		err := importToLocation(elt)
                if err != nil {
			return err
		}
        }

	return nil
}

func (s *Service) unimportFromLocations(ctx context.Context, loc Location, importLocations []ImportLocation, values []string) error {
	vn := s.client.Versioning()
	valuesByName := make(map[string]bool)
	for _, elt := range values {
		valuesByName[elt] = true
	}

	unimportFromLocation := func(il ImportLocation) error {
		xpath, err := il.XpathForLocation(vn, loc)
                if err != nil {
			return err
		}

		mutex := s.getImportMutex(util.AsXpath(xpath))
                mutex.Lock()
                defer mutex.Unlock()

                cmd := &xmlapi.Config{
	                Action:  "get",
	                Xpath:   util.AsXpath(xpath),
		}

                bytes, _, err := s.client.Communicate(ctx, cmd, false, nil)
		if err != nil && !errors.IsObjectNotFound(err) {
			return err
		}

		existing, err := il.UnmarshalPangoXML(bytes)
                if err != nil {
                	return err
		}

		var filtered []string
		for _, elt := range existing {
			if _, found := valuesByName[elt]; !found {
                        	filtered = append(filtered, elt)
			}
		}

		element, err := il.MarshalPangoXML(filtered)
                if err != nil {
                	return err
		}

		cmd = &xmlapi.Config{
                	Action: "edit",
                        Xpath: util.AsXpath(xpath),
			Element: element,
		}

                _, _, err = s.client.Communicate(ctx, cmd, false, nil)
		if err != nil {
			return err
		}

		return err
	}

        for _, elt := range importLocations {
		err := unimportFromLocation(elt)
                if err != nil {
			return err
		}
        }

	return nil
}
{{- end }}

// Read returns the given config object, using the specified action ("get" or "show").
{{- if .Entry}}
    func (s *Service) Read(ctx context.Context, loc Location, name, action string) (*Entry, error) {
    {{- if $.Spec.Params.uuid}}
        return s.read(ctx, loc, name, action, true, false)
    {{- else}}
        return s.read(ctx, loc, name, action, false)
    {{- end}}
    }
    {{- if $.Spec.Params.uuid}}
        // ReadById returns the given config object with specified ID, using the specified action ("get" or "show").
        func (s *Service) ReadById(ctx context.Context, loc Location, uuid, action string) (*Entry, error) {
        return s.read(ctx, loc, uuid, action, false, false)
        }
    {{- end}}
{{- else}}
    func (s *Service) Read(ctx context.Context, loc Location, action string) (*Config, error) {
    return s.read(ctx, loc, action, false)
    }
{{- end}}

// ReadFromConfig returns the given config object from the loaded XML config.
// Requires that client.LoadPanosConfig() has been invoked.
{{- if .Entry}}
    func (s *Service) ReadFromConfig(ctx context.Context, loc Location, name string) (*Entry, error) {
    {{- if $.Spec.Params.uuid}}
        return s.read(ctx, loc, name, "", true, true)
    {{- else}}
        return s.read(ctx, loc, name, "", true)
    {{- end}}
    }
    {{- if $.Spec.Params.uuid}}
        // ReadFromConfigById returns the given config object with specified ID from the loaded XML config.
        // Requires that client.LoadPanosConfig() has been invoked.
        func (s *Service) ReadFromConfigById(ctx context.Context, loc Location, uuid string) (*Entry, error) {
        return s.read(ctx, loc, uuid, "", false, true)
        }
    {{- end}}
{{- else}}
    func (s *Service) ReadFromConfig(ctx context.Context, loc Location) (*Config, error) {
    return s.read(ctx, loc, "", true)
    }
{{- end}}

{{if .Entry}}
    {{- if $.Spec.Params.uuid}}
        func (s *Service) read(ctx context.Context, loc Location, value, action string, byName, usePanosConfig bool) (*Entry, error) {
        if byName && value == "" {
        return nil, errors.NameNotSpecifiedError
        }
        if !byName && value == "" {
        return nil, errors.UuidNotSpecifiedError
        }
    {{- else}}
        func (s *Service) read(ctx context.Context, loc Location, value, action string, usePanosConfig bool) (*Entry, error) {
        if value == "" {
        return nil, errors.NameNotSpecifiedError
        }
    {{- end}}
{{- else}}
    func (s *Service) read(ctx context.Context, loc Location, action string, usePanosConfig bool) (*Config, error) {
{{- end}}
vn := s.client.Versioning()
_, normalizer, err := Versioning(vn)
if err != nil {
return nil, err
}

{{- if .Entry}}
    var path []string
    {{- if $.Spec.Params.uuid}}
        if byName {
        path, err = loc.XpathWithEntryName(vn, value)
        } else {
        path, err = loc.XpathWithUuid(vn, value)
        }
    {{- else}}
        path, err = loc.XpathWithEntryName(vn, value)
    {{- end}}
{{- else}}
    path, err := loc.Xpath(vn)
{{- end}}
if err != nil {
return nil, err
}

if usePanosConfig {
if _, err = s.client.ReadFromConfig(ctx, path, true, normalizer); err != nil {
return nil, err
}
} else {
cmd := &xmlapi.Config{
Action: action,
Xpath:  util.AsXpath(path),
Target: s.client.GetTarget(),
}

if _, _, err = s.client.Communicate(ctx, cmd, true, normalizer); err != nil {
if err.Error() == "No such node" && action == "show" {
return nil, errors.ObjectNotFound()
}
return nil, err
}
}

list, err := normalizer.Normalize()
if err != nil {
return nil, err
} else if len(list) != 1 {
return nil, fmt.Errorf("expected to %q 1 entry, got %d", action, len(list))
}

return list[0], nil
}

{{ $object := "Config" }}
{{- if .Entry }}
  {{ $object = "Entry" }}
{{- end }}

{{- if .Entry }}
    // Update updates the given config object, then returns the result.
    func (s *Service) Update(ctx context.Context, loc Location, entry *{{ $object }}, name string) (*{{ $object }}, error) {
  {{- if $.Spec.Params.uuid}}
        return s.update(ctx, loc, entry, name, true)
  {{- else}}
        return s.update(ctx, loc, entry, name)
  {{- end}}
    }

  {{- if $.Spec.Params.uuid}}
        // UpdateById updates the given config object, then returns the result.
        func (s *Service) UpdateById(ctx context.Context, loc Location, entry *{{ $object }}, uuid string) (*{{ $object }}, error) {
        return s.update(ctx, loc, entry, uuid, false)
        }
  {{- end}}

  {{- if $.Spec.Params.uuid}}
        func (s *Service) update(ctx context.Context, loc Location, entry *{{ $object }}, value string, byName bool) (*{{ $object }}, error) {
  {{- if .Entry }}
        if byName && entry.Name == "" {
        return nil, errors.NameNotSpecifiedError
        }
        if !byName && value == "" {
        return nil, errors.UuidNotSpecifiedError
        }
  {{- end }}
  {{- else}}
        func (s *Service) update(ctx context.Context, loc Location, entry *{{ $object }}, value string) (*{{ $object }}, error) {
    {{- if .Entry }}
        if entry.Name == "" {
        return nil, errors.NameNotSpecifiedError
        }
    {{- end }}
  {{- end}}
{{- else }}
func (s *Service) Update(ctx context.Context, loc Location, entry *{{ $object }}) (*{{ $object }}, error) {
{{- end }}

    vn := s.client.Versioning()
    updates := xmlapi.NewMultiConfig(2)
    specifier, _, err := Versioning(vn)
    if err != nil {
        return nil, err
    }


  {{- if .Entry }}
    var old *{{ $object }}
    {{- if $.Spec.Params.uuid}}
        if byName {
    {{- end}}
    if value != "" && value != entry.Name {
        path, err := loc.XpathWithEntryName(vn, value)
        if err != nil {
            return nil, err
        }

        old, err = s.Read(ctx, loc, value, "get")

        updates.Add(&xmlapi.Config{
            Action:  "rename",
            Xpath:   util.AsXpath(path),
            NewName: entry.Name,
            Target:  s.client.GetTarget(),
        })
    } else {
        old, err = s.Read(ctx, loc, entry.Name, "get")
    }
    {{- if $.Spec.Params.uuid}}
        } else {
        old, err = s.ReadById(ctx, loc, value, "get")
        }
    {{- end}}
    if err != nil {
        return nil, err
    } else if old == nil {
        return nil, fmt.Errorf("previous object doesn't exist for update")
    }
  {{- else }}
    var old *{{ $object }}
    old, err = s.Read(ctx, loc, "get")
    if err != nil {
        return nil, err
    } else if old == nil {
        return nil, fmt.Errorf("previous object doesn't exist for update")
    }
  {{- end }}

  {{- if .Entry }}
    if !SpecMatches(entry, old) {
        path, err := loc.XpathWithEntryName(vn, entry.Name)
  {{- else }}
    if !SpecMatches(entry, old) {
        path, err := loc.Xpath(vn)
  {{- end }}
        if err != nil {
            return nil, err
        }


        updateSpec, err := specifier(entry)
        if err != nil {
            return nil, err
        }

        updates.Add(&xmlapi.Config{
            Action:  "edit",
            Xpath:   util.AsXpath(path),
            Element: updateSpec,
            Target:  s.client.GetTarget(),
        })
    }

    if len(updates.Operations) != 0 {
        if _, _, _, err = s.client.MultiConfig(ctx, updates, false, nil); err != nil {
            return nil, err
        }
    }

  {{- if .Entry }}
    {{- if $.Spec.Params.uuid}}
        if byName {
            return s.Read(ctx, loc, entry.Name, "get")
        } else {
            return s.ReadById(ctx, loc, value, "get")
        }
    {{- else}}
        return s.Read(ctx, loc, entry.Name, "get")
    {{- end}}
  {{- else }}
        return s.Read(ctx, loc, "get")
  {{- end }}
}

// Delete deletes the given item.
{{- if and .Entry .Imports}}
    func (s *Service) Delete(ctx context.Context, loc Location, importLocations []ImportLocation, name ...string) error {
    {{- if $.Spec.Params.uuid}}
        return s.delete(ctx, loc, importLocations, name, true)
    {{- else}}
        return s.delete(ctx, loc, importLocations, name)
    {{- end}}
    }
    {{- if $.Spec.Params.uuid}}
        // DeleteById deletes the given item with specified ID.
        func (s *Service) DeleteById(ctx context.Context, loc Location, importLocations []ImportLocation, uuid ...string) error {
        return s.delete(ctx, loc, importLocations, uuid, false)
        }
    {{- end}}
{{- else if .Entry }}
    func (s *Service) Delete(ctx context.Context, loc Location, name ...string) error {
    {{- if $.Spec.Params.uuid}}
        return s.delete(ctx, loc, name, true)
    {{- else}}
        return s.delete(ctx, loc, name)
    {{- end}}
    }
    {{- if $.Spec.Params.uuid}}
        // DeleteById deletes the given item with specified ID.
        func (s *Service) DeleteById(ctx context.Context, loc Location, uuid ...string) error {
        return s.delete(ctx, loc, uuid, false)
        }
    {{- end}}
{{- else }}
    func (s *Service) Delete(ctx context.Context, loc Location, config *Config) error {
    return s.delete(ctx, loc, config)
    }
{{- end}}

{{- if and .Entry .Imports }}
    {{- if $.Spec.Params.uuid}}
        func (s *Service) delete(ctx context.Context, loc Location, importLocations []ImportLocation, values []string, byName bool) error {
    {{- else}}
        func (s *Service) delete(ctx context.Context, loc Location, importLocations []ImportLocation, values []string) error {
    {{- end}}
{{- else if .Entry}}
    {{- if $.Spec.Params.uuid}}
        func (s *Service) delete(ctx context.Context, loc Location, values []string, byName bool) error {
    {{- else}}
        func (s *Service) delete(ctx context.Context, loc Location, values []string) error {
    {{- end}}
{{- else}}
    func (s *Service) delete(ctx context.Context, loc Location, config *Config) error {
{{- end}}
{{- if .Entry}}
    {{- if $.Spec.Params.uuid}}
        for _, value := range values {
        if byName && value == "" {
        return errors.NameNotSpecifiedError
        }
        if !byName && value == "" {
        return errors.UuidNotSpecifiedError
        }
        }
    {{- else}}
        for _, value := range values {
        if value == "" {
        return errors.NameNotSpecifiedError
        }
        }
    {{- end}}
{{- end}}

vn := s.client.Versioning()

{{- if .Entry}}
    var err error
    deletes := xmlapi.NewMultiConfig(len(values))
  {{- if .Imports }}
    err = s.unimportFromLocations(ctx, loc, importLocations, values)
    if err != nil {
        return err
    }
  {{- end }}
    for _, value := range values {
    var path []string
    {{- if $.Spec.Params.uuid}}
        if byName {
        path, err = loc.XpathWithEntryName(vn, value)
        } else {
        path, err = loc.XpathWithUuid(vn, value)
        }
    {{- else}}
        path, err = loc.XpathWithEntryName(vn, value)
    {{- end}}
{{- else}}
    path, err := loc.Xpath(vn)
{{- end}}
if err != nil {
return err
}

{{- if .Entry}}
    deletes.Add(&xmlapi.Config{
    Action: "delete",
    Xpath:  util.AsXpath(path),
    Target: s.client.GetTarget(),
    })
    }

    _, _, _, err = s.client.MultiConfig(ctx, deletes, false, nil)

    return err
{{- else}}
    deleteSuffixes := []string{}

    {{- $numberOfVersions := len .SupportedVersions }}
    {{- if gt $numberOfVersions 1}}
        {{- range $index, $version := .SupportedVersions }}
            {{- if ne $version ""}}
                version{{createGoSuffixFromVersion $version}}, err := version.New("{{$version}}")
                if err != nil {
                return err
                }
            {{- end}}
        {{- end}}
        {{- range $index, $version := .SupportedVersions }}
            {{- if ne $version ""}}
                {{- if eq $index 1}}
                    if vn.Gte(version{{createGoSuffixFromVersion $version}}) {
                                    {{- else}}
                    } else if vn.Gte(version{{createGoSuffixFromVersion $version}}) {
                {{- end}}
                {{- range $_, $param := $.Spec.SortedParams}}
                    {{- if paramSupportedInVersion $param $version}}
                        {{- range $_, $profile := $param.Profiles}}
                            {{- range $_, $xpath := xmlPathSuffixes $param}}
                                deleteSuffixes = append(deleteSuffixes, "{{$xpath}}")
                            {{- end}}
                        {{- end}}
                    {{- end}}
                {{- end}}
                {{- range $_, $param := $.Spec.SortedOneOf}}
                {{- end}}
            {{- end}}
        {{- end}}
        } else {
        {{- range $_, $param := $.Spec.SortedParams}}
            {{- if paramSupportedInVersion $param ""}}
                {{- range $_, $profile := $param.Profiles}}
                    {{- range $_, $xpath := xmlPathSuffixes $param}}
                        deleteSuffixes = append(deleteSuffixes, "{{$xpath}}")
                    {{- end}}
                {{- end}}
            {{- end}}
        {{- end}}
        {{- range $_, $param := $.Spec.SortedOneOf}}
        {{- end}}
        }
    {{- else}}
        {{- range $version := .SupportedVersionRanges }}
            {{- range $_, $param := $.Spec.SortedParams}}
                {{- if paramSupportedInVersion $param $version.Minimum}}
                    {{- range $_, $profile := $param.Profiles}}
                        {{- range $_, $xpath := xmlPathSuffixes $param}}
                            deleteSuffixes = append(deleteSuffixes, "{{$xpath}}")
                        {{- end}}
                    {{- end}}
                {{- end}}
            {{- end}}
            {{- range $_, $param := $.Spec.SortedOneOf}}
            {{- end}}
        {{- end}}
    {{- end}}

    for _, suffix := range deleteSuffixes {
    cmd := &xmlapi.Config{
    Action: "delete",
    Xpath:  util.AsXpath(append(path, suffix)),
    Target: s.client.GetTarget(),
    }

    _, _, err = s.client.Communicate(ctx, cmd, false, nil)

    if err != nil {
    return err
    }
    }
    return nil
{{- end}}
}

{{- if false }}
// RemoveFromImport removes the given config object from import
func (s *Service) RemoveFromImport(ctx context.Context, loc Location, entry Entry) error {
    {{- range $_, $import := $.Imports}}
    if loc.{{$import.Name.CamelCase}} != nil {
		templateLocation, templateApi, templateEntry, importedNames, err := s.getImportedNamesFor{{$import.Name.CamelCase}}(ctx, loc, entry)
        if err != nil {
		    return err
	    }

        for index, item := range importedNames {
			if item == entry.Name {
				importedNames = append(importedNames[:index], importedNames[index+1:]...)
			}
		}

        err = s.setImportedNamesFor{{$import.Name.CamelCase}}(ctx, loc, entry, templateLocation, templateApi, templateEntry, importedNames)
        if err != nil {
		    return err
	    }
	}
    {{- end}}
	return nil
}
{{- end}}

{{- if .Entry}}
    // List returns a list of objects using the given action ("get" or "show").
    // Params filter and quote are for client side filtering.
    func (s *Service) List(ctx context.Context, loc Location, action, filter, quote string) ([]*Entry, error) {
    return s.list(ctx, loc, action, filter, quote, false)
    }

    // ListFromConfig returns a list of objects at the given location.
    // Requires that client.LoadPanosConfig() has been invoked.
    // Params filter and quote are for client side filtering.
    func (s *Service) ListFromConfig(ctx context.Context, loc Location, filter, quote string) ([]*Entry, error) {
    return s.list(ctx, loc, "", filter, quote, true)
    }

    func (s *Service) list(ctx context.Context, loc Location, action, filter, quote string, usePanosConfig bool) ([]*Entry, error) {
    var err error

    var logic *filtering.Group
    if filter != "" {
    logic, err = filtering.Parse(filter, quote)
    if err != nil {
    return nil, err
    }
    }

    vn := s.client.Versioning()

    _, normalizer, err := Versioning(vn)
    if err != nil {
    return nil, err
    }

    path, err := loc.XpathWithEntryName(vn, "")
    if err != nil {
    return nil, err
    }

    if usePanosConfig {
    if _, err = s.client.ReadFromConfig(ctx, path, false, normalizer); err != nil {
    return nil, err
    }
    } else{
    cmd := &xmlapi.Config{
    Action: action,
    Xpath:  util.AsXpath(path),
    Target: s.client.GetTarget(),
    }

    if _, _, err = s.client.Communicate(ctx, cmd, true, normalizer); err != nil {
    if err.Error() == "No such node" && action == "show" {
    return nil, nil
    }
    return nil, err
    }
    }

    listing, err := normalizer.Normalize()
    if err != nil || logic == nil {
    return listing, err
    }

    filtered := make([]*Entry, 0, len(listing))
    for _, x := range listing {
    ok, err := logic.Matches(x)
    if err != nil {
    return nil, err
    }
    if ok {
    filtered = append(filtered, x)
    }
    }

    return filtered, nil
    }

    {{- if $.Spec.Params.uuid}}
        // MoveGroup arranges the given rules in the order specified.
        // Any rule with a UUID specified is ignored.
        // Only the rule names are considered for the purposes of the rule placement.
 func (s *Service) MoveGroup(ctx context.Context, loc Location, position movement.Position, entries []*Entry, batchSize int) error {
        if len(entries) == 0 {
        	return nil
        }

        existing, err := s.List(ctx, loc, "get", "", "")
        if err != nil {
	        return err
        } else if len(existing) == 0 {
	        return fmt.Errorf("no rules present")
        }

	movements, err := movement.MoveGroup(position, entries, existing)
	if err != nil {
		return err
	}

	updates := xmlapi.NewChunkedMultiConfig(len(movements), batchSize)

	for _, elt := range movements {
	        path, err := loc.XpathWithEntryName(s.client.Versioning(), elt.Movable.EntryName())
	        if err != nil {
		        return err
	        }

		switch elt.Where {
		case movement.ActionWhereFirst, movement.ActionWhereLast:
		        updates.Add(&xmlapi.Config{
			        Action:      "move",
			        Xpath:       util.AsXpath(path),
			        Where:       string(elt.Where),
			        Destination: string(elt.Where),
			        Target:      s.client.GetTarget(),
		        })
		case movement.ActionWhereBefore, movement.ActionWhereAfter:
		        updates.Add(&xmlapi.Config{
			        Action:      "move",
			        Xpath:       util.AsXpath(path),
			        Where:       string(elt.Where),
			        Destination: elt.Destination.EntryName(),
			        Target:      s.client.GetTarget(),
		        })
		}

	}

        if len(updates.Operations) > 0 {
	        _, _, _, err = s.client.MultiConfig(ctx, updates, false, nil)
	        return err
        }

	return nil
}


        // HITCOUNT returns the hit count for the given rule.
        func (s *Service) HitCount(ctx context.Context, loc Location, rules ...string) ([]util.HitCount, error) {
        switch {
        case loc.Vsys != nil:
        cmd := &xmlapi.Op{
        Command: util.NewHitCountRequest(RuleType, loc.Vsys.Vsys, rules),
        Target:  s.client.GetTarget(),
        }
        var resp util.HitCountResponse

        if _, _, err := s.client.Communicate(ctx, cmd, false, &resp); err != nil {
        return nil, err
        }

        return resp.Results, nil
        }

        return nil, fmt.Errorf("unsupported location")
        }

        // SetAuditComment sets the given audit comment for the given rule.
        func (s *Service) SetAuditComment(ctx context.Context, loc Location, name, comment string) error {
        if name == "" {
        return errors.NameNotSpecifiedError
        }

        vn := s.client.Versioning()

        path, err := loc.XpathWithEntryName(vn, name)
        if err != nil {
        return err
        }

        cmd := &xmlapi.Op{
        Command: audit.SetComment{
        Xpath:   util.AsXpath(path),
        Comment: comment,
        },
        Target: s.client.GetTarget(),
        }

        _, _, err = s.client.Communicate(ctx, cmd, false, nil)
        return err
        }

        // CurrentAuditComment gets any current uncommitted audit comment for the given rule.
        func (s *Service) CurrentAuditComment(ctx context.Context, loc Location, name string) (string, error) {
        if name == "" {
        return "", errors.NameNotSpecifiedError
        }

        vn := s.client.Versioning()

        path, err := loc.XpathWithEntryName(vn, name)
        if err != nil {
        return "", err
        }

        cmd := &xmlapi.Op{
        Command: audit.GetComment{
        Xpath: util.AsXpath(path),
        },
        Target: s.client.GetTarget(),
        }

        var resp audit.UncommittedComment
        if _, _, err = s.client.Communicate(ctx, cmd, false, &resp); err != nil {
        return "", err
        }

        return resp.Comment, nil
        }

        // AuditCommentHistory returns a chunk of historical audit comment logs.
        func (s *Service) AuditCommentHistory(ctx context.Context, loc Location, name, direction string, nlogs, skip int) ([]audit.Comment, error) {
        if name == "" {
        return nil, errors.NameNotSpecifiedError
        }

        var err error
        var base, vsysDg string
        switch {
        case loc.Vsys != nil:
        vsysDg = loc.Vsys.Vsys
        base = "rulebase"
        case loc.Shared != nil:
        vsysDg = "shared"
        base = loc.Shared.Rulebase
        case loc.DeviceGroup != nil:
        vsysDg = loc.DeviceGroup.DeviceGroup
        base = loc.DeviceGroup.Rulebase
        }

        if vsysDg == "" || base == "" {
        return nil, fmt.Errorf("unsupported location")
        }

        query := strings.Join([]string{
        "(subtype eq audit-comment)",
        fmt.Sprintf("(path contains '\\'%s\\'')", name),
        fmt.Sprintf("(path contains '%s')", RuleType),
        fmt.Sprintf("(path contains %s)", base),
        fmt.Sprintf("(path contains '\\'%s\\'')", vsysDg),
        }, " and ")
        extras := url.Values{}
        extras.Set("uniq", "yes")

        cmd := &xmlapi.Log{
        LogType:   "config",
        Query:     query,
        Direction: direction,
        Nlogs:     nlogs,
        Skip:      skip,
        Extras:    extras,
        }

        var job util.JobResponse
        if _, _, err = s.client.Communicate(ctx, cmd, false, &job); err != nil {
        return nil, err
        }

        var resp audit.CommentHistory
        if _, err = s.client.WaitForLogs(ctx, job.Id, 1*time.Second, &resp); err != nil {
        return nil, err
        }

        if len(resp.Comments) != 0 {
        if clock, err := s.client.Clock(ctx); err == nil {
        for i := range resp.Comments {
        resp.Comments[i].SetTime(clock)
        }
        }
        }

        return resp.Comments, nil
        }
    {{- end}}
{{- end}}
