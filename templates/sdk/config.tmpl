{{- if not .Entry}}
    package {{packageName .GoSdkPath}}

    import (
    "encoding/xml"
    "github.com/PaloAltoNetworks/pango/generic"
    "github.com/PaloAltoNetworks/pango/version"
    )

    type Config{{createGoSuffixFromVersion ""}} struct {
    {{- range $_, $param := $.Spec.Params}}
        {{$param.Name.CamelCase}} {{specParamType "" $param}}
    {{- end}}
    {{- range $_, $param := $.Spec.OneOf}}
        {{$param.Name.CamelCase}} {{specParamType "" $param}}
    {{- end}}

    Misc map[string][]generic.Xml
    }

    {{- range $name, $spec := nestedSpecs $.Spec }}
        type {{$name}}{{createGoSuffixFromVersion ""}} struct {
        {{- range $_, $param := $spec.Params}}
            {{$param.Name.CamelCase}} {{specParamType $name $param}}
        {{- end}}
        {{- range $_, $param := $spec.OneOf}}
            {{$param.Name.CamelCase}} {{specParamType $name $param}}
        {{- end}}
        }
    {{- end}}

    {{- range $version := .SupportedVersions }}
        type configXmlContainer{{createGoSuffixFromVersion $version}} struct {
        XMLName xml.Name `xml:"result"`
        Answer []configXml{{createGoSuffixFromVersion $version}} `xml:"system"`
        }
    {{- end}}

    {{- range $version := .SupportedVersions }}
        type configXml{{createGoSuffixFromVersion $version}} struct {
        XMLName xml.Name `xml:"system"`
        {{- range $_, $param := $.Spec.Params}}
            {{- if paramSupportedInVersion $param $version}}
                {{- if $param.Spec}}
                    {{$param.Name.CamelCase}} {{xmlParamType "" $param}}{{createGoSuffixFromVersion $version}} {{xmlTag $param}}
                {{- else}}
                    {{$param.Name.CamelCase}} {{xmlParamType "" $param}} {{xmlTag $param}}
                {{- end}}
            {{- end}}
        {{- end}}
        {{- range $_, $param := $.Spec.OneOf}}
            {{- if paramSupportedInVersion $param $version}}
                {{- if $param.Spec}}
                    {{$param.Name.CamelCase}} {{xmlParamType "" $param}}{{createGoSuffixFromVersion $version}} {{xmlTag $param}}
                {{- else}}
                    {{$param.Name.CamelCase}} {{xmlParamType "" $param}} {{xmlTag $param}}
                {{- end}}
            {{- end}}
        {{- end}}

        Misc []generic.Xml `xml:",any"`
        }
    {{- end}}

    {{- range $version := .SupportedVersions }}
        {{- range $name, $spec := nestedSpecs $.Spec }}
            type {{$name}}Xml{{createGoSuffixFromVersion $version}} struct {
            {{- range $_, $param := $spec.Params}}
                {{- if paramSupportedInVersion $param $version}}
                    {{- if $param.Spec}}
                        {{$param.Name.CamelCase}} {{xmlParamType $name $param}}{{createGoSuffixFromVersion $version}} {{xmlTag $param}}
                    {{- else}}
                        {{$param.Name.CamelCase}} {{xmlParamType $name $param}} {{xmlTag $param}}
                    {{- end}}
                {{- end}}
            {{- end}}
            {{- range $_, $param := $spec.OneOf}}
                {{- if paramSupportedInVersion $param $version}}
                    {{- if $param.Spec}}
                        {{$param.Name.CamelCase}} {{xmlParamType $name $param}}{{createGoSuffixFromVersion $version}} {{xmlTag $param}}
                    {{- else}}
                        {{$param.Name.CamelCase}} {{xmlParamType $name $param}} {{xmlTag $param}}
                    {{- end}}
                {{- end}}
            {{- end}}

            Misc []generic.Xml `xml:",any"`
            }
        {{- end}}
    {{- end}}

    func Versioning(vn version.Number) (Specifier, Normalizer, error) {
    {{- $numberOfVersions := len .SupportedVersions }}
    {{- if gt $numberOfVersions 1}}
        {{- range $index, $version := .SupportedVersions }}
            {{- if ne $version ""}}
                version{{createGoSuffixFromVersion $version}}, err := version.New("{{$version}}")
                if err != nil {
                return nil, nil, err
                }
            {{- end}}
        {{- end}}
        {{- range $index, $version := .SupportedVersions }}
            {{- if ne $version ""}}
                {{- if eq $index 1}}
                    if vn.Gte(version{{createGoSuffixFromVersion $version}}) {
                    return specifyConfig{{createGoSuffixFromVersion $version}}, &configXmlContainer{{createGoSuffixFromVersion $version}}{}, nil
                {{- else}}
                    } else if vn.Gte(version{{createGoSuffixFromVersion $version}}) {
                    return specifyConfig{{createGoSuffixFromVersion $version}}, &configXmlContainer{{createGoSuffixFromVersion $version}}{}, nil
                {{- end}}
            {{- end}}
        {{- end}}
        } else {
    {{- end}}
    return specifyConfig, &configXmlContainer{}, nil
    {{- if gt $numberOfVersions 1}}
        }
    {{- end}}
    }

    {{- range $version := .SupportedVersions }}
        func specifyConfig{{createGoSuffixFromVersion $version}}(o Config) (any, error) {
        config := configXml{{createGoSuffixFromVersion $version}}{}

        {{- range $_, $param := $.Spec.Params}}
            {{specifyEntryAssignment "config" $param $version}}
        {{- end}}
        {{- range $_, $param := $.Spec.OneOf}}
            {{specifyEntryAssignment "config" $param $version}}
        {{- end}}

        config.Misc = o.Misc["Config"]

        return config, nil
        }
    {{- end}}

    {{- range $version := .SupportedVersions }}
        func (c *configXmlContainer{{createGoSuffixFromVersion $version}}) Normalize() ([]Config, error) {
        configList := make([]Config, 0, len(c.Answer))
        for _, o := range c.Answer {
        config := Config{
        Misc: make(map[string][]generic.Xml),
        }
        {{- range $_, $param := $.Spec.Params}}
            {{normalizeAssignment "config" $param $version}}
        {{- end}}
        {{- range $_, $param := $.Spec.OneOf}}
            {{normalizeAssignment "config" $param $version}}
        {{- end}}

        config.Misc["Config"] = o.Misc

        configList = append(configList, config)
        }

        return configList, nil
        }
    {{- end}}
{{- end}}