package {{packageName .GoSdkPath}}

import (
	"fmt"

	"github.com/PaloAltoNetworks/pango/errors"
	"github.com/PaloAltoNetworks/pango/util"
	"github.com/PaloAltoNetworks/pango/version"
)

type Location struct {
    {{range $key, $location := .Locations}}
    {{- camelCase $key}} {{locationType $key $location true}} `json:"{{$key}}{{omitEmpty $location}}"`
    {{end}}
}
{{range $key, $location := .Locations}}
{{- if $location.Vars}}
type {{locationType $key $location false}} struct {
{{- range $key, $var := $location.Vars}}
	{{camelCase $key}} string `json:"{{$key}}"`
{{- end}}
}
{{end}}
{{- end}}
func (o Location) IsValid() error {
	count := 0

	switch {
    {{- range $key, $location := .Locations}}
    case o.{{- camelCase $key}}{{if ne (locationType $key $location true) "bool"}} != nil{{end}}:
        {{- range $name, $var := $location.Vars}}
        if o.{{camelCase $key}}.{{camelCase $name}} == "" {
            return fmt.Errorf("{{camelCase $name}} is unspecified")
        }
        {{- end}}
        count++
    {{- end}}
    }

	if count == 0 {
		return fmt.Errorf("no path specified")
	}

	if count > 1 {
		return fmt.Errorf("multiple paths specified: only one should be specified")
	}

	return nil
}

func (o Location) Xpath(vn version.Number, name string) ([]string, error) {

	var ans []string

	switch {
    {{- range $key, $location := .Locations}}
    case o.{{- camelCase $key}}{{if ne (locationType $key $location true) "bool"}} != nil{{end}}:
        {{- range $name, $var := $location.Vars}}
        if o.{{camelCase $key}}.{{camelCase $name}} == "" {
            return nil, fmt.Errorf("{{camelCase $name}} is unspecified")
        }
        {{- end}}
        ans = []string{
            {{- range $name, $xpath := $location.Xpath}}
            {{- if contains $xpath "Entry"}}
            {{asEntryXpath $key $xpath}}
            {{- else}}
            "{{$xpath}}",
            {{- end}}
            {{- end}}
        }
    {{- end}}
	default:
		return nil, errors.NoLocationSpecifiedError
	}

	ans = append(ans, util.AsEntryXpath([]string{name}))

	return ans, nil
}