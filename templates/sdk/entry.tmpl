{{- define "entryXmlStructTmpl" }}
type entryXml{{createGoSuffixFromVersion $.Version}} struct {
	XMLName xml.Name `xml:"entry"`
	Name string `xml:"name,attr"`
  {{- range $_, $param := $.Spec.Params}}
    {{- if and (paramNotSkipped $param) (paramSupportedInVersion $param $.Version)}}
      {{- if $param.Spec}}
        {{$param.Name.CamelCase}} {{xmlParamType "" $param}}{{createGoSuffixFromVersion $.Version}} {{xmlTag $param}}
      {{- else}}
        {{$param.Name.CamelCase}} {{xmlParamType "" $param}} {{xmlTag $param}}
      {{- end}}
    {{- end}}
  {{- end}}

  {{- range $_, $param := $.Spec.OneOf}}
    {{- if and (paramNotSkipped $param) (paramSupportedInVersion $param $.Version)}}
      {{- if $param.Spec}}
        {{$param.Name.CamelCase}} {{xmlParamType "" $param}}{{createGoSuffixFromVersion $.Version}} {{xmlTag $param}}
      {{- else}}
        {{$param.Name.CamelCase}} {{xmlParamType "" $param}} {{xmlTag $param}}
      {{- end}}
    {{- end}}
  {{- end}}

	Misc []generic.Xml `xml:",any"`
}
{{- end }}

{{- define "entryXmlChildStructTmpl" }}
type {{ .Name }}Xml{{createGoSuffixFromVersion $.Version}} struct {
  {{- range $_, $param := $.Spec.Params}}
    {{- if eq $param.Name.CamelCase "Name"}}
	XMLName xml.Name `xml:"entry"`
    {{- end}}
    {{- if and (paramNotSkipped $param) (paramSupportedInVersion $param $.Version)}}
      {{- if $param.Spec}}
	{{$param.Name.CamelCase}} {{xmlParamType $.Name $param}}{{createGoSuffixFromVersion $.Version}} {{xmlTag $param}}
      {{- else}}
	{{$param.Name.CamelCase}} {{xmlParamType $.Name $param}} {{xmlTag $param}}
      {{- end}}
    {{- end}}
  {{- end}}

  {{- range $_, $param := $.Spec.OneOf}}
    {{- if and (paramNotSkipped $param) (paramSupportedInVersion $param $.Version)}}
      {{- if $param.Spec}}
	{{$param.Name.CamelCase}} {{xmlParamType $.Name $param}}{{createGoSuffixFromVersion $.Version}} {{xmlTag $param}}
      {{- else}}
	{{$param.Name.CamelCase}} {{xmlParamType $.Name $param}} {{xmlTag $param}}
      {{- end}}
    {{- end}}
  {{- end}}

	Misc []generic.Xml `xml:",any"`
}
{{- end }}

{{- define "SpecifyEntryTmpl" }}
func specifyEntry{{ createGoSuffixFromVersion $.Version }}(o *Entry) (any, error) {
	entry := entryXml{{ createGoSuffixFromVersion $.Version }}{}
	entry.Name = o.Name

  {{- range $_, $param := $.Spec.Params}}
    {{ specifyEntryAssignment "entry" $param $.Version }}
  {{- end}}

  {{- range $_, $param := $.Spec.OneOf}}
    {{ specifyEntryAssignment "entry" $param $.Version }}
  {{- end}}

	entry.Misc = o.Misc["Entry"]

	return entry, nil
}

{{- end }}

{{- define "NormalizeTmpl" }}
func (c *entryXmlContainer{{ createGoSuffixFromVersion $.Version }}) Normalize() ([]*Entry, error) {
	entryList := make([]*Entry, 0, len(c.Answer))
	for _, o := range c.Answer {
		entry := &Entry{
		Misc: make(map[string][]generic.Xml),
	}
	entry.Name = o.Name
  {{- range $_, $param := $.Spec.Params}}
    {{- if paramNotSkipped $param }}
	{{normalizeAssignment "entry" $param $.Version }}
    {{- end }}
  {{- end}}

  {{- range $_, $param := $.Spec.OneOf}}
    {{- if paramNotSkipped $param }}
	{{normalizeAssignment "entry" $param $.Version }}
    {{- end }}
  {{- end}}

	entry.Misc["Entry"] = o.Misc

	entryList = append(entryList, entry)
}

return entryList, nil
}
{{- end }}

{{- if .Entry}}
    package {{packageName .GoSdkPath}}

    {{renderImports "entry"}}

    var (
    _ filtering.Fielder = &Entry{}
    )

    var (
    Suffix = []string{
    {{- $length := subtract (len .XpathSuffix) 1 }}
    {{- range $index, $suffix := .XpathSuffix}}"
    {{- $suffix}}"{{- if lt $index $length}},{{- end}}
    {{- end}}}
    )

    type Entry{{createGoSuffixFromVersion nil}} struct {
    Name string
    {{- range $_, $param := $.Spec.Params}}
      {{- if paramNotSkipped $param }}
        {{$param.Name.CamelCase}} {{specParamType "" $param}}
      {{- end }}
    {{- end}}
    {{- range $_, $param := $.Spec.OneOf}}
      {{- if paramNotSkipped $param }}
        {{$param.Name.CamelCase}} {{specParamType "" $param}}
      {{- end }}
    {{- end}}

    Misc map[string][]generic.Xml
    }

    {{ range $name, $spec := nestedSpecs $.Spec }}
        type {{$name}}{{createGoSuffixFromVersion nil}} struct {
        {{- range $_, $param := $spec.Params}}
          {{- if paramNotSkipped $param }}
            {{$param.Name.CamelCase}} {{specParamType $name $param}}
          {{- end }}
        {{- end}}
        {{- range $_, $param := $spec.OneOf}}
          {{- if paramNotSkipped $param }}
            {{$param.Name.CamelCase}} {{specParamType $name $param}}
          {{- end }}
        {{- end}}
        }
    {{- end}}

	type entryXmlContainer{{createGoSuffixFromVersion nil}} struct {
		        Answer []entryXml{{createGoSuffixFromVersion nil}} `xml:"entry"`
	}

    {{ range $version := .SupportedVersionRanges }}
        type entryXmlContainer{{createGoSuffixFromVersion $version.Minimum}} struct {
        Answer []entryXml{{createGoSuffixFromVersion $version.Minimum}} `xml:"entry"`
        }
    {{- end}}

    {{- template "entryXmlStructTmpl" Map "Spec" $.Spec "Version" nil }}
    {{- range $version := .SupportedVersionRanges }}
        {{- template "entryXmlStructTmpl" Map "Spec" $.Spec "Version" $version.Minimum }}
    {{- end}}

    {{- range $name, $spec := nestedSpecs $.Spec }}
      {{- template "entryXmlChildStructTmpl" Map "Name" $name "Spec" $spec "Version" nil }}
    {{- end }}

    {{- range $version := .SupportedVersionRanges }}
      {{- range $name, $spec := nestedSpecs $.Spec }}
        {{- template "entryXmlChildStructTmpl" Map "Name" $name "Spec" $spec "Version" $version.Minimum }}
      {{- end }}
    {{- end}}

    {{ range $name, $const := .Const}}
        const (
        {{- range $value := $const.Values}}
            {{$const.Name.CamelCase}}{{$value.Name.CamelCase}} = "{{$value.Value}}"
        {{- end}}
        )
    {{- end}}

    func (e *Entry) Field(v string) (any, error) {
    if v == "name" || v == "Name" {
    return e.Name, nil
    }

    {{- range $_, $param := .Spec.Params}}
      {{- if not (paramNotSkipped $param) }}
        {{ continue }}
      {{- end }}
        if v == "{{$param.Name.Underscore}}" || v == "{{$param.Name.CamelCase}}" {
        return e.{{$param.Name.CamelCase}}, nil
        }
        {{- if eq $param.Type "list"}}
            if v == "{{$param.Name.Underscore}}|LENGTH" || v == "{{$param.Name.CamelCase}}|LENGTH" {
            return int64(len(e.{{$param.Name.CamelCase}})), nil
            }
        {{- end}}
    {{- end}}
    {{- range $_, $param := .Spec.OneOf}}
        if v == "{{$param.Name.Underscore}}" || v == "{{$param.Name.CamelCase}}" {
        return e.{{$param.Name.CamelCase}}, nil
        }
    {{- end}}

    return nil, fmt.Errorf("unknown field")
    }

    func Versioning(vn version.Number) (Specifier, Normalizer, error) {
    {{- range $variable, $version := .SupportedVersionDefinitions }}
        {{ $variable }}, _ := version.New("{{ $version }}")
    {{- end }}

    {{- range $versionDef := .SupportedVersionRanges }}
	if vn.Gte({{ $versionDef.MinimumVariable }}) && vn.Lt({{ $versionDef.MaximumVariable }}) {
		return {{ $versionDef.SpecifierFunc }}, &{{ $versionDef.EntryXmlContainer }}{}, nil
	}
    {{- end }}

    return specifyEntry, &entryXmlContainer{}, nil
    }


    {{- template "SpecifyEntryTmpl" Map "Spec" $.Spec "Version" nil }}

    {{ range $version := .SupportedVersionRanges }}
      	{{- template "SpecifyEntryTmpl" Map "Spec" $.Spec "Version" $version.Minimum }}
    {{- end}}

    {{- template "NormalizeTmpl" Map "Spec" $.Spec "Version" nil }}
    {{- range $version := .SupportedVersionRanges }}
      {{- template "NormalizeTmpl" Map "Spec" $.Spec "Version" $version.Minimum }}
    {{- end}}

    func SpecMatches(a, b *Entry) bool {
    if a == nil && b != nil || a != nil && b == nil {
    return false
    } else if a == nil && b == nil {
    return true
    }

    // Don't compare Name.
    {{- range $_, $param := .Spec.Params}}
        {{- if not (paramNotSkipped $param) }}
          {{ continue }}
        {{- end }}
        if !{{specMatchesFunction $param}}(a.{{$param.Name.CamelCase}}, b.{{$param.Name.CamelCase}}) {
        return false
        }
    {{- end}}
    {{- range $_, $param := .Spec.OneOf}}
        {{- if not (paramNotSkipped $param) }}
          {{ continue }}
        {{- end }}
        if !{{specMatchesFunction $param}}(a.{{$param.Name.CamelCase}}, b.{{$param.Name.CamelCase}}) {
        return false
        }
    {{- end}}

    return true
    }

    {{nestedSpecMatchesFunction $.Spec}}

    func (o *Entry) EntryName() string {
        return o.Name
    }

    func (o *Entry) SetEntryName(name string) {
        o.Name = name
    }

  {{- if .Spec.Params.uuid}}
    func (o *Entry) EntryUuid() *string {
        return o.Uuid
    }

    func (o *Entry) SetEntryUuid(uuid *string) {
        o.Uuid = uuid
    }
  {{- end }}
{{- end}}
