{{- if .Entry}}
    package {{packageName .GoSdkPath}}

    {{renderImports "entry"}}

    var (
    _ filtering.Fielder = &Entry{}
    )

    var (
    suffix = []string{
    {{- $length := subtract (len .XpathSuffix) 1 }}
    {{- range $index, $suffix := .XpathSuffix}}"
    {{- $suffix}}"{{- if lt $index $length}},{{- end}}
    {{- end}}}
    )

    {{ RenderApiStructs $ }}

	type entryXmlContainer{{createGoSuffixFromVersion nil}} struct {
		        Answer []entryXml{{createGoSuffixFromVersion nil}} `xml:"entry"`
	}

    {{ range $version := .SupportedVersionRanges }}
        type entryXmlContainer{{createGoSuffixFromVersion $version.Minimum}} struct {
        Answer []entryXml{{createGoSuffixFromVersion $version.Minimum}} `xml:"entry"`
        }
    {{- end}}

    {{ RenderXmlContainerNormalizers $ }}

    {{ RenderXmlContainerSpecifiers $ }}

    {{ RenderXmlStructs $ }}

    {{ RenderToXmlMarshallers $ }}

    {{ range $name, $const := .Const}}
        const (
        {{- range $value := $const.Values}}
            {{$const.Name.CamelCase}}{{$value.Name.CamelCase}} = "{{$value.Value}}"
        {{- end}}
        )
    {{- end}}

    func (e *Entry) Field(v string) (any, error) {
    if v == "name" || v == "Name" {
    return e.Name, nil
    }

    {{- range $_, $param := .Spec.SortedParams}}
      {{- if not (paramNotSkipped $param) }}{{ continue }}{{- end }}
        if v == "{{$param.Name.Underscore}}" || v == "{{$param.Name.CamelCase}}" {
        return e.{{$param.Name.CamelCase}}, nil
        }
        {{- if eq $param.Type "list"}}
            if v == "{{$param.Name.Underscore}}|LENGTH" || v == "{{$param.Name.CamelCase}}|LENGTH" {
            return int64(len(e.{{$param.Name.CamelCase}})), nil
            }
        {{- end}}
    {{- end}}
    {{- range $_, $param := .Spec.SortedOneOf}}
        if v == "{{$param.Name.Underscore}}" || v == "{{$param.Name.CamelCase}}" {
        return e.{{$param.Name.CamelCase}}, nil
        }
    {{- end}}

    return nil, fmt.Errorf("unknown field")
    }

    func Versioning(vn version.Number) (Specifier, Normalizer, error) {
    {{- range $variable, $version := .SupportedVersionDefinitions }}
        {{ $variable }}, _ := version.New("{{ $version }}")
    {{- end }}

    {{- range $versionDef := .SupportedVersionRanges }}
	if vn.Gte({{ $versionDef.MinimumVariable }}) && vn.Lt({{ $versionDef.MaximumVariable }}) {
		return {{ $versionDef.SpecifierFunc }}, &{{ $versionDef.EntryXmlContainer }}{}, nil
	}
    {{- end }}

    return specifyEntry, &entryXmlContainer{}, nil
    }

    {{-  RenderSpecMatchers $ }}

    func (o *Entry) EntryName() string {
        return o.Name
    }

    func (o *Entry) SetEntryName(name string) {
        o.Name = name
    }

    func (o *Entry) GetMiscAttributes() []xml.Attr {
	return o.MiscAttributes
    }

    func (o *Entry) SetMiscAttributes(attrs []xml.Attr) {
	o.MiscAttributes = attrs
    }

  {{- if .Spec.Params.uuid}}
    func (o *Entry) EntryUuid() *string {
        return o.Uuid
    }

    func (o *Entry) SetEntryUuid(uuid *string) {
        o.Uuid = uuid
    }
  {{- end }}
{{- end}}
