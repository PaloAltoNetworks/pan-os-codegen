package terraform

import (
	"fmt"
	"strings"
	"text/template"

	"github.com/paloaltonetworks/pan-os-codegen/pkg/imports"
	"github.com/paloaltonetworks/pan-os-codegen/pkg/properties"
	"github.com/paloaltonetworks/pan-os-codegen/pkg/translate/normalized"
)

func Implementation(location string, namespaces map[string]*normalized.Namespace, schemas map[string]normalized.Item, spec *properties.Normalization) ([]string, []string, string, string, error) {
	manager := imports.NewManager()
	dslist := make([]string, 0, 2)
	rslist := make([]string, 0, 1)
	chunks := make([]string, 0, cap(dslist)+cap(rslist))

	var name, code string
	var libs *imports.Manager
	var err error

	// Check for a resource.
	name, code, libs, err = Resource(location, namespaces, schemas, spec)
	if err != nil {
		return nil, nil, "", "", fmt.Errorf("Err creating %q resource: %s", location, err)
	}
	if code != "" {
		manager.Merge(libs)
		rslist = append(rslist, name)
		chunks = append(chunks, code)
	}

	if len(chunks) == 0 {
		return nil, nil, "", "", nil
	}

	filename := fmt.Sprintf("%s.go", namespaces[location].ModuleSuffix())

	fm := template.FuncMap{
		"RenderImports": func() (string, error) { return manager.RenderImports() },
		"CodeChunk":     func() []string { return chunks },
	}

	t := template.Must(
		template.New(
			"terraform-implementation",
		).Funcs(
			fm,
		).Parse(`
{{- /* Begin */ -}}
package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

{{ RenderImports }}
{{- range $code := CodeChunk }}

{{ $code }}
{{- end }}
{{- /* Done */ -}}`,
		),
	)

	var b strings.Builder
	err = t.Execute(&b, nil)

	return dslist, rslist, filename, b.String(), err
}
